<!DOCTYPE html>
<html>
<head>
<title></title>
<meta name=viewport content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />   
<link type="text/css" href="css/styles.css" rel="stylesheet" />
<link type="text/css" href="css/custom.css" rel="stylesheet" />
<link rel="stylesheet" title="Default" href="css/default.css"> 
<script type="text/javascript" src="js/jquery.js"></script>
<script src="js/highlight.min.js"></script>
<script src="js/delphi.min.js"></script>
<script src="js/javascript.min.js"></script>   
<script type="text/javascript">
hljs.tabReplace='    ';hljs.initHighlightingOnLoad();function showme(id){var divid=document.getElementById(id);if(divid.style.display=='block')divid.style.display='none';else divid.style.display='block';}
$(document).ready(function(){$("button").click(function(){$(this).text($(this).text()=='Show JS code'?'Hide JS code':'Show JS code');showme('widget');});});
</script>   
<style> 
html, body { margin:0; padding:0; background: #ffffff;} 
#idheader {width:100%; height:auto; padding: 0; margin: 0;position: fixed;top: 0;
z-index: 2;} 
#idheader table { background: #2C5D88; min-height: 59px }             
#idheader h1 { color: #FFF }     
#idnav {text-align: right; width: 158px; vertical-align: middle;} 
#idnav a { text-decoration: none }
#idnav span {display: inline-block;width: 24px;height: 24px;margin-left: 4px;
background:url('css/img/hm_webhelp_buttons_grey.png') top left no-repeat;} 
#idnav a span {background-image:url('css/img/hm_webhelp_buttons_white.png');} 
#idnav a span:hover {background-image:url('css/img/hm_webhelp_buttons_orange.png');} 
#idnav span.hmbtnprev { background-position: 0 -32px }
#idnav span.hmbtnnext { background-position: -24px -32px }
#idnav span.hmbtntop  { background-position: -48px -32px }
.language-css {background-color: #cd6a51;content: attr(rel);color: white;position: absolute;
width: 100%;background: #e18728;font-family: 'PT Serif', serif;padding: 5px 0;text-indent: 15px;font-size: 17px;font-weight: 300;line-height: 1.45;font-weight: 700;}
#checkoutbutton {
    background-color: #2C5D88;
  -moz-border-radius: 15px;
  -webkit-border-radius: 15px;
  color: #FFFFFF;
  border: 5px solid #e18728;
  padding: 2px;
  margin: 0px 0px 0px 25px;
}
#checkoutbutton:hover {opacity: 0.6; }
.note {padding: 12px;margin: 6px;border-top: 1px;border-right: 1px;border-bottom: 1px;border-left: 1px;border-style: solid;border-color: #D3D3D3;background-color: #E5EFFB;}
</style>
</head>
<body>
<div id="idheader">
<div id="idheaderbg">
<table style="width:100%;border:none;margin:0px;" cellspacing="0" cellpadding="0"> 
  <tr>
    <td class="topichead" style="text-align:left;">
      <h1 class="p_Heading1" style="page-break-after: avoid;"><span class="f_Heading1">Using Method Overloading</span></h1>
    </td>
    <td class="topichead" id="idnav">
      <a href="hm_pas2js388.htm"><span class="hmbtnprev"></span></a>
      <a href="index.htm" title="Parent Chapter"><span class="hmbtntop"></span></a>
      <a href="hm_pas2js390.htm"><span class="hmbtnnext"></span></a>
     </td>  
  </tr>  
</table>
</div>
</div>  

<br/><br/>
<table style="width:100%;border:none;margin:10px;" cellspacing="0" cellpadding="0">
  <tr>
	<td>	
	<div class="note"><img src="information.png" border="0" alt="Information" align="bottom" height="16" width="16">&nbsp; Method overloading refers to the ability to define several methods with the same name but with different signatures (parameter types, number of parameters). Delphi requires that overloaded methods be marked with the overload keyword.</div>
	
	</td>
  </tr>
</table>
	
<pre><span id="code" class="language-css">Pas2JS pascal source code</span><br>
<code class="delphi" style="background-color: #FFFEEB;">
type
 TFoo = class
 public
   procedure MethodA;
 end;

 TBar = class(TFoo)
 public
   procedure MethodA(const I: Integer); overload;
   procedure MethodB(const I: Integer); overload;
   procedure MethodB(const I: Integer; const S: string); overload;
 end;

 TFooBar = class(TBar)
 public
   procedure MethodA(const S: string); overload;
   function MethodC(const I: Integer): Integer; overload;
   function MethodC(const S: string): Integer; overload;
 end;

implementation

{ TFoo }

procedure TFoo.MethodA;
begin
  WriteLn('TFoo.MethodA');
end;

{ TBar }

procedure TBar.MethodB(const I: Integer);
begin
  WriteLn('TBar.MethodB '+ IntToStr(I));
end;

procedure TBar.MethodB(const I: Integer; const S: string);
begin
  WriteLn('TBar.MethodB'+ IntToStr(I) + S);
end;

procedure TBar.MethodA(const I: Integer);
begin
  WriteLn('TBar.MethodA'+ IntToStr(I));
end;

{ TFooBar }

procedure TFooBar.MethodA(const S: string);
begin
  WriteLn('TFooBar.MethodA'+ S);
end;

function TFooBar.MethodC(const I: Integer): Integer;
begin
 Result := 0 + I;
end;

function TFooBar.MethodC(const S: string): Integer;
begin
 Result := 0 + StrToInt(S);
end;

end.

{ main program }

var
 o: TFooBar;
begin
  o := TFooBar.Create;
  o.MethodA('abc');
  o.MethodA(123);
  o.MethodA;
  o.MethodB(123);
  o.MethodB(123,'abcd');
  WriteLn( o.MethodC(123) );
  WriteLn ( o.MethodC('456') );
end.

{ --- CONSOLE OUTPUT ----
	TFooBar.MethodAabc
	TBar.MethodA123
	TFoo.MethodA
	TBar.MethodB 123
	TBar.MethodB123abcd
	123
	456 
}
</code></pre>
<button type="button" id="checkoutbutton">Show JS code</button>
<div id="widget" style="display:none;">
<pre>
<code class="javascript">
rtl.module("Unit7",["System","Classes","SysUtils"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TFoo",pas.System.TObject,function () {
    this.MethodA = function () {
      pas.System.Writeln("TFoo.MethodA");
    };
  });
  rtl.createClass($mod,"TBar",$mod.TFoo,function () {
    this.MethodA$1 = function (I) {
      pas.System.Writeln("TBar.MethodA" + pas.SysUtils.IntToStr(I));
    };
    this.MethodB = function (I) {
      pas.System.Writeln("TBar.MethodB " + pas.SysUtils.IntToStr(I));
    };
    this.MethodB$1 = function (I, S) {
      pas.System.Writeln(("TBar.MethodB" + pas.SysUtils.IntToStr(I)) + S);
    };
  });
  rtl.createClass($mod,"TFooBar",$mod.TBar,function () {
    this.MethodA$2 = function (S) {
      pas.System.Writeln("TFooBar.MethodA" + S);
    };
    this.MethodC = function (I) {
      var Result = 0;
      Result = 0 + I;
      return Result;
    };
    this.MethodC$1 = function (S) {
      var Result = 0;
      Result = 0 + pas.SysUtils.StrToInt(S);
      return Result;
    };
  });
});

rtl.module("program",["System","Classes","SysUtils","Unit7"],function () {
  "use strict";
  var $mod = this;
  this.o = null;
  $mod.$main = function () {
    $mod.o = pas.Unit7.TFooBar.$create("Create");
    $mod.o.MethodA$2("abc");
    $mod.o.MethodA$1(123);
    $mod.o.MethodA();
    $mod.o.MethodB(123);
    $mod.o.MethodB$1(123,"abcd");
    pas.System.Writeln($mod.o.MethodC(123));
    pas.System.Writeln($mod.o.MethodC$1("456"));
  };
});

</code></pre></div>
</div>
</body>
</html>
