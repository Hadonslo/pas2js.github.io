<!DOCTYPE html>
<html>
<head>
<title></title>
<meta name=viewport content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />   
<link type="text/css" href="css/styles.css" rel="stylesheet" />
<link type="text/css" href="css/custom.css" rel="stylesheet" />
<link rel="stylesheet" title="Default" href="css/default.css"> 
<script type="text/javascript" src="js/jquery.js"></script>
<script src="js/highlight.min.js"></script>
<script src="js/delphi.min.js"></script>
<script src="js/javascript.min.js"></script>   
<script type="text/javascript">
hljs.tabReplace='    ';hljs.initHighlightingOnLoad();function showme(id){var divid=document.getElementById(id);if(divid.style.display=='block')divid.style.display='none';else divid.style.display='block';}
$(document).ready(function(){$("button").click(function(){$(this).text($(this).text()=='Show JS code'?'Hide JS code':'Show JS code');showme('widget');});});
</script>   
<style> 
html, body { margin:0; padding:0; background: #ffffff;} 
#idheader {width:100%; height:auto; padding: 0; margin: 0;position: fixed;top: 0;
z-index: 2;} 
#idheader table { background: #2C5D88; min-height: 59px }             
#idheader h1 { color: #FFF }     
#idnav {text-align: right; width: 158px; vertical-align: middle;} 
#idnav a { text-decoration: none }
#idnav span {display: inline-block;width: 24px;height: 24px;margin-left: 4px;
background:url('css/img/hm_webhelp_buttons_grey.png') top left no-repeat;} 
#idnav a span {background-image:url('css/img/hm_webhelp_buttons_white.png');} 
#idnav a span:hover {background-image:url('css/img/hm_webhelp_buttons_orange.png');} 
#idnav span.hmbtnprev { background-position: 0 -32px }
#idnav span.hmbtnnext { background-position: -24px -32px }
#idnav span.hmbtntop  { background-position: -48px -32px }
.language-css {background-color: #cd6a51;content: attr(rel);color: white;position: absolute;
width: 100%;background: #e18728;font-family: 'PT Serif', serif;padding: 5px 0;text-indent: 15px;font-size: 17px;font-weight: 300;line-height: 1.45;font-weight: 700;}
#checkoutbutton {
    background-color: #2C5D88;
  -moz-border-radius: 15px;
  -webkit-border-radius: 15px;
  color: #FFFFFF;
  border: 5px solid #e18728;
  padding: 2px;
  margin: 0px 0px 0px 25px;
}
#checkoutbutton:hover {opacity: 0.6; }
.note {padding: 12px;margin: 6px;border-top: 1px;border-right: 1px;border-bottom: 1px;border-left: 1px;border-style: solid;border-color: #D3D3D3;background-color: #E5EFFB;}
</style>
</head>
<body>
<div id="idheader">
<div id="idheaderbg">
<table style="width:100%;border:none;margin:0px;" cellspacing="0" cellpadding="0"> 
  <tr>
    <td class="topichead" style="text-align:left;">
      <h1 class="p_Heading1" style="page-break-after: avoid;"><span class="f_Heading1">Using Operator Overloading</span></h1>
    </td>
    <td class="topichead" id="idnav">
      <a href="hm_pas2js391.htm"><span class="hmbtnprev"></span></a>
      <a href="index.htm" title="Parent Chapter"><span class="hmbtntop"></span></a>
      <a href="hm_pas2js393.htm"><span class="hmbtnnext"></span></a>
     </td>  
  </tr>  
</table>
</div>
</div>  

<br/><br/>
<table style="width:100%;border:none;margin:10px;" cellspacing="0" cellpadding="0">
  <tr>
	<td>	
	<div class="note"><img src="underconstruction.png" border="0" alt="Information" align="bottom" height="64" width="64">&nbsp; Operator overloading is the process of providing new implementations for built-in operators (such as '+' and '-' for example) when the operands are user-defined types such as classes. This can simplify the usage of a class and make it more intuitive. Operator Overloading feature is <strong>not implemented in pas2js yet</strong>.</div>
	<p>The following examples create a simple class for manipulating complex numbers. It overloads the '+' and '-' operators.</p>
	</td>
  </tr>
</table>
	
<pre><span id="code" class="language-css">Pas2JS pascal source code</span><br>
<code class="delphi" style="background-color: #FFFEEB;">
unit Unit10;

{$mode objfpc}

interface

uses
  Classes, SysUtils;

type
 TComplexNumber = class
 public
   Real: Integer;
   Imaginary: Integer;
   class operator Add(const X, Y: TComplexNumber): TComplexNumber;
   class operator Subtract(const X, Y: TComplexNumber): TComplexNumber;
   function ToString: string; override;
   constructor Create(const Real, Imaginary: Integer);
 end;

implementation

{ TComplexNumber }

constructor TComplexNumber.Create(const Real, Imaginary: Integer);
begin
 inherited Create;
 Self.Real := Real;
 Self.Imaginary := Imaginary;
end;

class operator TComplexNumber.Add(const X,
 Y: TComplexNumber): TComplexNumber;
begin
 Result := TComplexNumber.Create(X.Real + Y.Real, X.Imaginary + Y.Imaginary);
end;

class operator TComplexNumber.Subtract(const X,
 Y: TComplexNumber): TComplexNumber;
begin
 Result := TComplexNumber.Create(X.Real - Y.Real, X.Imaginary - Y.Imaginary);
end;

function TComplexNumber.ToString: string;
begin
 if (Self.Imaginary > 0) then
   Result := Format('%d + %di', [Self.Real, Self.Imaginary])
 else
   Result := Format('%d - %di', [Self.Real, Abs(Self.Imaginary)]);
end;

end.


{ *** main program *** }
var
 A, B: TComplexNumber;

begin
 A := TComplexNumber.Create(2, 5);
 B := TComplexNumber.Create(4, -3);
 WriteLn(Format('A = (%s), B = (%s)', [A, B]));
 WriteLn(Format('A + B = (%s)', [A + B]));
 WriteLn(Format('A - B = (%s)', [A - B]));
  
end.

{ --- should produce the following output: ---- }
(*
	A = (2 + 5i), B = (4 - 3i)
	A + B = (6 + 2i)
	A - B = (-2 + 8i)
*)

</code></pre>
<button type="button" id="checkoutbutton">Show JS code</button>
<div id="widget" style="display:none;">
<pre>
<code class="javascript">

</code></pre></div>
</div>
</body>
</html>
