<!DOCTYPE html>
<html>
<head>
<title></title>
<meta name=viewport content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />   
<link type="text/css" href="css/styles.css" rel="stylesheet" />
<link type="text/css" href="css/custom.css" rel="stylesheet" />
<link rel="stylesheet" title="Default" href="css/default.css"> 
<script type="text/javascript" src="js/jquery.js"></script>
<script src="js/highlight.min.js"></script>
<script src="js/delphi.min.js"></script>
<script src="js/javascript.min.js"></script>   
<script type="text/javascript">
hljs.tabReplace='    ';hljs.initHighlightingOnLoad();function showme(id){var divid=document.getElementById(id);if(divid.style.display=='block')divid.style.display='none';else divid.style.display='block';}
$(document).ready(function(){$("button").click(function(){$(this).text($(this).text()=='Show JS code'?'Hide JS code':'Show JS code');showme('widget');});});
</script>   
<style> 
html, body { margin:0; padding:0; background: #ffffff;} 
#idheader {width:100%; height:auto; padding: 0; margin: 0;position: fixed;top: 0;
z-index: 2;} 
#idheader table { background: #2C5D88; min-height: 59px }             
#idheader h1 { color: #FFF }     
#idnav {text-align: right; width: 158px; vertical-align: middle;} 
#idnav a { text-decoration: none }
#idnav span {display: inline-block;width: 24px;height: 24px;margin-left: 4px;
background:url('css/img/hm_webhelp_buttons_grey.png') top left no-repeat;} 
#idnav a span {background-image:url('css/img/hm_webhelp_buttons_white.png');} 
#idnav a span:hover {background-image:url('css/img/hm_webhelp_buttons_orange.png');} 
#idnav span.hmbtnprev { background-position: 0 -32px }
#idnav span.hmbtnnext { background-position: -24px -32px }
#idnav span.hmbtntop  { background-position: -48px -32px }
.language-css {background-color: #cd6a51;content: attr(rel);color: white;position: absolute;
width: 100%;background: #e18728;font-family: 'PT Serif', serif;padding: 5px 0;text-indent: 15px;font-size: 17px;font-weight: 300;line-height: 1.45;font-weight: 700;}
#checkoutbutton {
    background-color: #2C5D88;
  -moz-border-radius: 15px;
  -webkit-border-radius: 15px;
  color: #FFFFFF;
  border: 5px solid #e18728;
  padding: 2px;
  margin: 0px 0px 0px 25px;
}
#checkoutbutton:hover {opacity: 0.6; }
</style>
</head>
<body>
<div id="idheader">
<div id="idheaderbg">
<table style="width:100%;border:none;margin:0px;" cellspacing="0" cellpadding="0"> 
  <tr>
    <td class="topichead" style="text-align:left;">
      <h1 class="p_Heading1" style="page-break-after: avoid;"><span class="f_Heading1">resourcestrings in pas2js</span></h1>
    </td>
    <td class="topichead" id="idnav">
      <a href="hm_pas2js003.htm"><span class="hmbtnprev"></span></a>
      <a href="index.htm" title="Parent Chapter"><span class="hmbtntop"></span></a>
      <a href="hm_pas2js005.htm"><span class="hmbtnnext"></span></a>
     </td>  
  </tr>  
</table>
</div>
</div>  

<br/><br/>
<h2><span id="gs" class="mw-headline"><img src="propertyicon.png" alt="propertyicon.png" width="16" height="14"> resourcestrings - inline</span></h2>
<strong>resourcestrings</strong> in pas2js are translated to JS objects with original (org) and current value.
	
<pre><span id="code" class="language-css">Pas2JS pascal source code</span><br>
<code class="delphi" style="background-color: #FFFEEB;">
unit Unit1;

{$mode objfpc}

interface

uses
  Classes, SysUtils, JS, Web;

resourcestring
  rsCompiler = 'pas2js';

var
  s: string;

implementation

initialization
  s:= rsCompiler;

end.  
</code></pre>
<button type="button" id="checkoutbutton">Show JS code</button>
<div id="widget" style="display:none;">
<pre>
<code class="javascript">
rtl.module("Unit1",["System","Classes","SysUtils","JS","Web"],function () {
  "use strict";
  var $mod = this;
  this.s = "";
  $mod.$resourcestrings = {rsCompiler: {org: "pas2js"}};
  $mod.$init = function () {
    $mod.s = rtl.getResStr(pas.Unit1,"rsCompiler");
  };
});
</code></pre></div>
</div>

<h2><span id="gs" class="mw-headline"><img src="propertyicon.png" alt="propertyicon.png" width="16" height="14"> resourcestrings - JSON file</span></h2>

	<p>The pas2js transpiler can generate a JSON file (extension <i>.jrs</i>) with all the resource strings in your program.</p>
    
	<p>The generating of this file is controlled by the <b>-Jr</b> option. It can take 3 possible arguments:</p>
	<ol>
	  <li><i><strong>none</strong></i> This is the default, no file is generated.</li>
	  <li><i><strong>unit</strong></i> one file per compiled unit will be generated. This file will contain all resource strings of the unit.</li>
	  <li><i><strong>program</strong></i> one file is generated for the main file. This fill will contain all used resource strings for the main file and all the units it uses.</li>
	</ol>

   <pre style="border: px solid #ddd; color: black; background-color: lavender; padding: 15px; width:40%; align-text: left;">
    pas2js -Jr<span style="color: red;">unit</span> unit1.pas -B	
	</pre>  

	<p>The following example has been generated a quite simple file "unit1.jrs".</p>
		
	<pre style="border: 1px solid #ddd; color: blue; background-color: #efefef; padding: 15px;width:40%;">	
	{
	  "Unit1" : {
		"rsCompiler" : "pas2js"
	  }
	}
	</pre>	
	
	<p>A JSON object exists for every unit, with each json property a resource string. The following example will generate a file named "project1.jrs" with all the used resource strings in your pas2js program.</p>
	
   <pre style="border: px solid #ddd; color: black; background-color: lavender; padding: 15px; width:40%; align-text: left;">
    pas2js -Jr<span style="color: red;">program</span> project1.lpr -B	
	</pre>  

<pre style="border: 1px solid #ddd; color: black; background-color: #efefef; padding: 15px;width:80%;">
{
  "RTLConsts" : {
    "SArgumentMissing" : "Missing argument in format \"%s\"",
    "SInvalidFormat" : "Invalid format specifier : \"%s\"",
    "SInvalidArgIndex" : "Invalid argument index in format: \"%s\"",
    "SListCapacityError" : "List capacity (%s) exceeded.",
    "SListCountError" : "List count (%s) out of bounds.",
    "SListIndexError" : "List index (%s) out of bounds",
    "SSortedListError" : "Operation not allowed on sorted list",
    "SDuplicateString" : "String list does not allow duplicates",
    "SErrFindNeedsSortedList" : "Cannot use find on unsorted list",
    "SInvalidName" : "Invalid component name: \"%s\"",
    "SInvalidBoolean" : "\"%s\" is not a valid boolean.",
    "SDuplicateName" : "Duplicate component name: \"%s\"",
    "SErrInvalidDate" : "Invalid date: \"%s\"",
    "SErrInvalidTimeFormat" : "Invalid time format: \"%s\"",
    "SInvalidDateFormat" : "Invalid date format: \"%s\"",
    "SCantReadPropertyS" : "Cannot read property \"%s\"",
    "SCantWritePropertyS" : "Cannot write property \"%s\"",
    "SErrPropertyNotFound" : "Unknown property: \"%s\"",
    "SIndexedPropertyNeedsParams" : "Indexed property \"%s\" needs parameters",
    "SErrInvalidTypecast" : "Invalid class typecast",
    "SErrInvalidInteger" : "Invalid integer value: \"%s\"",
    "SErrInvalidFloat" : "Invalid floating-point value: \"%s\"",
    "SInvalidDateTime" : "Invalid date-time value: %s",
    "SInvalidCurrency" : "Invalid currency value: %s",
    "SErrInvalidDayOfWeek" : "%d is not a valid day of the week",
    "SErrInvalidTimeStamp" : "Invalid date/timestamp : \"%s\"",
    "SErrInvalidDateWeek" : "%d %d %d is not a valid dateweek",
    "SErrInvalidDayOfYear" : "Year %d does not have a day number %d",
    "SErrInvalidDateMonthWeek" : "Year %d, month %d, Week %d and day %d is not a valid date.",
    "SErrInvalidDayOfWeekInMonth" : "Year %d Month %d NDow %d DOW %d is not a valid date",
    "SInvalidJulianDate" : "%f Julian cannot be represented as a DateTime",
    "SErrInvalidHourMinuteSecMsec" : "%d:%d:%d.%d is not a valid time specification",
    "SInvalidGUID" : "\"%s\" is not a valid GUID value",
    "SEmptyStreamIllegalReader" : "Illegal Nil stream for TReader constructor",
    "SInvalidPropertyValue" : "Invalid value for property",
    "SInvalidImage" : "Invalid stream format",
    "SUnknownProperty" : "Unknown property: \"%s\"",
    "SUnknownPropertyType" : "Unknown property type %d",
    "SAncestorNotFound" : "Ancestor class for \"%s\" not found.",
    "SUnsupportedPropertyVariantType" : "Unsupported property variant type %d",
    "SPropertyException" : "Error reading %s%s%s: %s",
    "SInvalidPropertyPath" : "Invalid property path",
    "SReadOnlyProperty" : "Property is read-only",
    "SClassNotFound" : "Class \"%s\" not found",
    "SEmptyStreamIllegalWriter" : "Illegal Nil stream for TWriter constructor",
    "SErrInvalidPropertyType" : "Invalid property type from streamed property: %d",
    "SParserExpected" : "Wrong token type: %s expected",
    "SParserInvalidFloat" : "Invalid floating point number: %s",
    "SParserInvalidInteger" : "Invalid integer number: %s",
    "SParserUnterminatedString" : "Unterminated string",
    "SParserWrongTokenType" : "Wrong token type: %s expected but %s found",
    "SParserWrongTokenSymbol" : "Wrong token symbol: %s expected but %s found",
    "SParserLocInfo" : " (at %d,%d, stream offset %.8x)",
    "SParserUnterminatedBinValue" : "Unterminated byte value",
    "SParserInvalidProperty" : "Invalid property"
  },
  "Classes" : {
    "SStreamInvalidSeek" : "Seek is not implemented for class %s",
    "SStreamNoReading" : "Stream reading is not implemented for class %s",
    "SStreamNoWriting" : "Stream writing is not implemented for class %s",
    "SReadError" : "Could not read data from stream",
    "SWriteError" : "Could not write data to stream",
    "SMemoryStreamError" : "Could not allocate memory",
    "SerrInvalidStreamSize" : "Invalid Stream size"
  },
  "Unit1" : {
    "rsCompiler" : "pas2js"
  }
}
</pre>		
<p>Of course, this file can be <u>translated</u>, and the translation file can be loaded using the rstranslate unit, part of the rtl. There are demo programs which demonstrate the use of this feature.<p>
<strong><u>Note:</u></strong> that the format is different from the format used by FPC:
<ul>
  <li>Identifiers in the file are case sensitive: the names must be typed as they appear in the source file.</li>
  <li>The strings are grouped per unit, this allows to load them fasters.</li>
  <li>The hash and bytes parts are missing, they make little sense in a Javascript context.</li>
</ul>
</body>
</html>
