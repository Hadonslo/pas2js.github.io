<!DOCTYPE html>
<html>
<head>
<title></title>
<meta name=viewport content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />   
<link type="text/css" href="css/styles.css" rel="stylesheet" />
<link type="text/css" href="css/custom.css" rel="stylesheet" />
<link rel="stylesheet" title="Default" href="css/default.css"> 
<script type="text/javascript" src="js/jquery.js"></script>
<script src="js/highlight.min.js"></script>
<script src="js/delphi.min.js"></script>
<script src="js/javascript.min.js"></script>   
<script type="text/javascript">
hljs.tabReplace='    ';hljs.initHighlightingOnLoad();function showme(id){var divid=document.getElementById(id);if(divid.style.display=='block')divid.style.display='none';else divid.style.display='block';}
$(document).ready(function(){$("button").click(function(){$(this).text($(this).text()=='Show JS code'?'Hide JS code':'Show JS code');showme('widget');});});
</script>   
<style> 
html, body { margin:0; padding:0; background: #ffffff;} 
#idheader {width:100%; height:auto; padding: 0; margin: 0;position: fixed;top: 0;
z-index: 2;} 
#idheader table { background: #2C5D88; min-height: 59px }             
#idheader h1 { color: #FFF }     
#idnav {text-align: right; width: 158px; vertical-align: middle;} 
#idnav a { text-decoration: none }
#idnav span {display: inline-block;width: 24px;height: 24px;margin-left: 4px;
background:url('css/img/hm_webhelp_buttons_grey.png') top left no-repeat;} 
#idnav a span {background-image:url('css/img/hm_webhelp_buttons_white.png');} 
#idnav a span:hover {background-image:url('css/img/hm_webhelp_buttons_orange.png');} 
#idnav span.hmbtnprev { background-position: 0 -32px }
#idnav span.hmbtnnext { background-position: -24px -32px }
#idnav span.hmbtntop  { background-position: -48px -32px }
.language-css {background-color: #cd6a51;content: attr(rel);color: white;position: absolute;
width: 100%;background: #e18728;font-family: 'PT Serif', serif;padding: 5px 0;text-indent: 15px;font-size: 17px;font-weight: 300;line-height: 1.45;font-weight: 700;}
#checkoutbutton {
    background-color: #2C5D88;
  -moz-border-radius: 15px;
  -webkit-border-radius: 15px;
  color: #FFFFFF;
  border: 5px solid #e18728;
  padding: 2px;
  margin: 0px 0px 0px 25px;
}
#checkoutbutton:hover {opacity: 0.6; }
.note {padding: 12px;margin: 6px;border-top: 1px;border-right: 1px;border-bottom: 1px;border-left: 1px;border-style: solid;border-color: #D3D3D3;background-color: #E5EFFB;}
</style>
</head>
<body>
<div id="idheader">
<div id="idheaderbg">
<table style="width:100%;border:none;margin:0px;" cellspacing="0" cellpadding="0"> 
  <tr>
    <td class="topichead" style="text-align:left;">
      <h1 class="p_Heading1" style="page-break-after: avoid;"><span class="f_Heading1">Using Virtual Methods</span></h1>
    </td>
    <td class="topichead" id="idnav">
      <a href="hm_pas2js385.htm"><span class="hmbtnprev"></span></a>
      <a href="index.htm" title="Parent Chapter"><span class="hmbtntop"></span></a>
      <a href="hm_pas2js387.htm"><span class="hmbtnnext"></span></a>
     </td>  
  </tr>  
</table>
</div>
</div>  

<br/><br/>
<table style="width:100%;border:none;margin:10px;" cellspacing="0" cellpadding="0">
  <tr>
	<td>	
	<div class="note"><img src="information.png" border="0" alt="Information" align="bottom" height="16" width="16">&nbsp; Virtual methods allow a method call, at run-time, to be directed to the appropriate code, appropriate for the type of the object instance used to make the call. In essence, the method is bound at run-time instead of at compile-time. The method is declared as virtual in the base class and then overridden in the derived class. Virtual methods are an important part of polymorphism since the same method call can produce results appropriate to the object instance used to make the call.</div>
	<p>Both FPC and Delphi require the overriding code to be explicitly declared as an override. </p>
	</td>
  </tr>
</table>
	
<pre><span id="code" class="language-css">Pas2JS pascal source code</span><br>
<code class="delphi" style="background-color: #FFFEEB;">
unit Unit4;

{$mode objfpc}

interface

uses
  Classes, SysUtils;

type
 TBase = class
 public
   function NonVirtualMethod: string;
   function VirtualMethod: string; virtual;
 end;

 TDerived = class(TBase)
 public
   function NonVirtualMethod: string;
   function VirtualMethod: string; override;
 end;

implementation

{ TBase }

function TBase.NonVirtualMethod: string;
begin
 Result := 'TBase.NonVirtualMethod';
end;

function TBase.VirtualMethod: string;
begin
 Result := 'TBase.VirtualMethod';
end;

{ TDerived }

function TDerived.NonVirtualMethod: string;
begin
 Result := 'TDerived.NonVirtualMethod';
end;

function TDerived.VirtualMethod: string;
begin
 Result := 'TDerived.VirtualMethod';
end;

end.

{ MAIN PROGRAM }

var
 Foo, Bar: TBase;
begin

  Foo := TBase.Create;
   Bar := TDerived.Create;
   try
     WriteLn(Foo.NonVirtualMethod);
     WriteLn(Foo.VirtualMethod);
     WriteLn(Bar.NonVirtualMethod);
     WriteLn(Bar.VirtualMethod);
   finally
     Bar.Free;
     Foo.Free;
   end;

end.
{  CONSOLE OUTPUT
  TBase.NonVirtualMethod
  TBase.VirtualMethod
  TBase.NonVirtualMethod
  TDerived.VirtualMethod 
}
</code></pre>
<button type="button" id="checkoutbutton">Show JS code</button>
<div id="widget" style="display:none;">
<pre>
<code class="javascript">
rtl.module("Unit4",["System","Classes","SysUtils"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TBase",pas.System.TObject,function () {
    this.NonVirtualMethod = function () {
      var Result = "";
      Result = "TBase.NonVirtualMethod";
      return Result;
    };
    this.VirtualMethod = function () {
      var Result = "";
      Result = "TBase.VirtualMethod";
      return Result;
    };
  });
  rtl.createClass($mod,"TDerived",$mod.TBase,function () {
    this.NonVirtualMethod$1 = function () {
      var Result = "";
      Result = "TDerived.NonVirtualMethod";
      return Result;
    };
    this.VirtualMethod = function () {
      var Result = "";
      Result = "TDerived.VirtualMethod";
      return Result;
    };
  });
});

rtl.module("program",["System","Classes","SysUtils","Unit4"],function () {
  "use strict";
  var $mod = this;
  this.Foo = null;
  this.Bar = null;
  $mod.$main = function () {
    $mod.Foo = pas.Unit4.TBase.$create("Create");
    $mod.Bar = pas.Unit4.TDerived.$create("Create");
    try {
      pas.System.Writeln($mod.Foo.NonVirtualMethod());
      pas.System.Writeln($mod.Foo.VirtualMethod());
      pas.System.Writeln($mod.Bar.NonVirtualMethod());
      pas.System.Writeln($mod.Bar.VirtualMethod());
    } finally {
      rtl.free($mod,"Bar");
      rtl.free($mod,"Foo");
    };
  };
});

</code></pre></div>
</div>
</body>
</html>
